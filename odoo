#!/usr/bin/env python3

import argparse
import os
import subprocess
from dotenv import load_dotenv
from pathlib import Path
import time


def run_bash():
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    print(f"docker exec -uroot -it {PROJECT_NAME} bash")
    os.system(f"docker exec -uodoo -it {PROJECT_NAME} bash")

def build_odoo(no_cache):
    ODOO_VERSION = os.getenv("ODOO_VERSION")
    RESOURCES_DIR = "/.resources"
    file_path = str(Path(__file__).resolve().parent)

    if not os.path.exists(file_path + "/.env"):
        print("Error #1: The file .env does not exist")
        return

    if not ODOO_VERSION:
        print("Error #2: ODOO_VERSION is not defined")
        return

    try:
        with open(file_path + RESOURCES_DIR + "/Dockerfile", "w") as Dockerfile:
            dockerfile_path = (
                file_path + RESOURCES_DIR + "/dockerfiles/" + ODOO_VERSION + "_Dockerfile"
            )
            dockerfile_template_path = file_path + RESOURCES_DIR + "/Dockerfile.template"
            print(dockerfile_template_path)

            if not os.path.exists(dockerfile_path):
                raise BaseException(f"Error #3: Dockerfile for {ODOO_VERSION} does not exist")

            if not os.path.exists(dockerfile_template_path):
                raise BaseException(f"Error #3: Dockerfile.template does not exist")

            with open(dockerfile_path, "r") as dockerfile_version:
                Dockerfile.write(dockerfile_version.read())
                Dockerfile.write("\n")  # Opcional: agregar un salto de línea entre los archivos

            with open(dockerfile_template_path, "r") as dockerfile_template:
                Dockerfile.write(dockerfile_template.read())
                Dockerfile.write("\n")  # Opcional: agregar un salto de línea entre los archivos

    except FileNotFoundError as e:
        print(e)
    if no_cache:
        print("Construyendo Odoo sin caché...")
        os.system("docker compose build --no-cache")
    else:
        print("Construyendo Odoo con caché...")
        os.system("docker compose build")

def reset_password(d,l="admin"):
    load_dotenv()
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    RESET_PASSWORD = os.getenv("RESET_PASSWORD")
    password = f"'{RESET_PASSWORD}'"
    login = f"'{l}'"
    os.system(
        f'docker exec -it -e PGPASSWORD={POSTGRES_PASSWORD} {PROJECT_NAME} psql --host {PROJECT_NAME}_db -U {POSTGRES_USER} -d {d} -c "update res_users set password = {password} where login = {login};"')
    os.system(
        f'docker exec -it -e PGPASSWORD={POSTGRES_PASSWORD} {PROJECT_NAME} psql --host {PROJECT_NAME}_db -U {POSTGRES_USER} -d {d} -c "delete from ir_config_parameter where key in (\'report.url\',\'web.base.url.freeze\');"')

def open_shell(d):
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    os.system(f"docker exec -it {PROJECT_NAME} odoo shell --shell-interface ipython --no-http --limit-memory-hard=0 --limit-memory-soft=0 -d {d}")

def run_odoo():
    print("Ejecutando Odoo...")
    os.system("docker compose up -d")


def stop_odoo():
    print("Deteniendo Odoo...")
    os.system("docker compose down")


def restart_odoo():
    print("Reiniciando Odoo...")
    os.system("docker compose down")
    os.system("docker compose up -d")


def psql(d):
    print(d)
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    POSTGRES_USER = os.getenv("POSTGRES_USER")
    POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD")
    os.system(
        f"docker exec -it -e PGPASSWORD={POSTGRES_PASSWORD} {PROJECT_NAME} psql --host {PROJECT_NAME}_db -U {POSTGRES_USER} -d {d}"
    )

# def run_tests(args):
#     load_dotenv()
#     PROJECT_NAME = os.getenv("PROJECT_NAME","")
#     database = "testing"
#     container = "docker exec -uodoo -it " + PROJECT_NAME
#     test_tags = ""

#     modules = ["l10n_ve","account"] 
#     os.system(f"{container} odoo --test-tags {test_tags} -d {database} -i {','.join(modules)} --without-demo=True --stop-after-init -c /home/odoo/.config/odoo.conf")

def run_update(d, modules):
    load_dotenv()
    PROJECT_NAME = os.getenv("PROJECT_NAME")
    print(f"docker exec -it {PROJECT_NAME} odoo -d {d} -u {' '.join(modules)}")
    os.system(f"docker exec -u odoo -it {PROJECT_NAME} odoo -d {d} -u {' '.join(modules)}")


def main():
    # Cargar las variables de entorno
    load_dotenv()

    # Crear el parser
    parser = argparse.ArgumentParser(description="Script para controlar Odoo.")

    subparsers = parser.add_subparsers(dest="action", help="Acciones")
    subparsers.add_parser("run", help="Ejecuta Odoo")
    subparsers.add_parser("stop", help="Detiene Odoo")
    subparsers.add_parser("restart", help="Reiniciar Odoo")
    subparsers.add_parser("bash", help="Bash")
    subparsers.add_parser("logs", help="Logs")

    # Subparser para el comando "build"
    build_parser = subparsers.add_parser("build", help="Construye Odoo")
    build_parser.add_argument("--no-cache", action="store_true", help="Construir sin usar caché")

    psql_parser = subparsers.add_parser("psql", help="psql")
    psql_parser.add_argument("database",help="Database name")

    reset_parser = subparsers.add_parser("reset", help="Sync Submodules")
    reset_parser.add_argument("database", help="database")
    reset_parser.add_argument("-l", default="admin", help="login")

    update_parser = subparsers.add_parser("u", help="update modules")
    update_parser.add_argument("database", help="database")
    update_parser.add_argument("modules")
    shell_parser = subparsers.add_parser("shell", help="Shell")
    shell_parser.add_argument("database", help="database")

    # Parsear los argumentos
    args = parser.parse_args()

    # Ejecutar la acción correspondiente
    if args.action == "run":
        run_odoo()
    elif args.action == "stop":
        stop_odoo()
    elif args.action == "restart":
        restart_odoo()
    elif args.action == "logs":
        os.system("docker compose logs -f --tail 100")
    elif args.action == "build":
        build_odoo(args.no_cache)
    elif args.action == "bash":
        run_bash()
    elif args.action == "psql":
        psql(args.database)
    elif args.action == "reset":
        reset_password(args.database,l=args.l)
    elif args.action == "u":
        run_update(args.database, args.modules.split(","))
    elif args.action == "shell":
        open_shell(args.database)
    # else:
    #     PROJECT_NAME = os.getenv("PROJECT_NAME")
    #     print(args)
    #     os.system(f"docker exec -uroot -it {PROJECT_NAME} odoo shell -d chef")


if __name__ == "__main__":
    main()
