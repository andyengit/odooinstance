#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import subprocess

_logger = logging.getLogger(__name__)


SOURCES = str(os.environ.get("SOURCES"))
CUSTOM = str(os.path.join(SOURCES, "custom"))
RESOURCES = str(os.environ.get("RESOURCES"))
CUSTOM_ENABLED = eval(str(os.environ.get("CUSTOM_ENABLED","True")))
IGNORE_REPO = str(os.environ.get("IGNORE_REPO","")).split(",")

addons = []

# Handle enterprise: use enterprise in custom or in src
ENTERPRISE_PATH = os.path.join(SOURCES, "enterprise")
if os.path.isdir(ENTERPRISE_PATH):
    addons.insert(0, os.path.join(ENTERPRISE_PATH))

INTEGRA_PATH = os.path.join(SOURCES, "own")
if os.path.isdir(INTEGRA_PATH):
    addons.insert(0, os.path.join(INTEGRA_PATH))

VE_PATH = os.path.join(SOURCES, "odoo-venezuela")
if os.path.isdir(VE_PATH):
    addons.insert(0, os.path.join(VE_PATH))

# Project repositories
repo_addons = []

# Custom repositories, usually mounted for development
if CUSTOM_ENABLED and os.path.isdir(CUSTOM):
    repo_addons += [
        os.path.join(CUSTOM, d)
        for d in sorted(os.listdir(CUSTOM))
        if os.path.isdir(os.path.join(CUSTOM, d)) and d not in IGNORE_REPO
    ]

    # requirements = []
    # for d in sorted(os.listdir(CUSTOM)):
    #     module_path = os.path.join(CUSTOM, d)
    #     requirement_file = os.path.join(module_path, "requirements.txt")
    #     if not os.path.exists(requirement_file):
    #         continue

    #     with open(requirement_file, "r") as file:
    #         for line in file:
    #             if line.startswith("#"):
    #                 continue

    #             line_parts = line.strip().split("==")
    #             if len(line_parts) > 1:
    #                 if line_parts[0] in requirements:
    #                     continue
    #                 requirements.append(line_parts[0])
    #                 continue
    #             requirements.append(line.strip())

    # new_requirements = []
    # requirements_path = os.path.join(RESOURCES, "requirements.txt")
    # with open(requirements_path, "w+") as file:
    #     for line in requirements:
    #         file.write(line + "\n")

    # if os.path.exists(requirements_path):
    #     subprocess.check_call(
    #         [
    #             "pip",
    #             "install",
    #             "--user",
    #             "--no-warn-script-location",
    #             "-r",
    #             requirements_path,
    #         ]
    #     )

# Repo addons are preprended, in case we want to overwrite odoo modules
addons = addons + repo_addons

# Overwrite 10-addons.conf
_logger.debug("Updating addons_path.. %s" % addons)
with open(os.path.join(RESOURCES, "conf", "10-addons.conf"), "w+") as file:
    file.write("[options]\naddons_path = %s" % ",".join(addons))
