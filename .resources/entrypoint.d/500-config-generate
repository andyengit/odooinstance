#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Generate Odoo server configuration from templates"""

import os
from contextlib import closing
from string import Template
from io import StringIO
from configparser import RawConfigParser

parser = RawConfigParser(strict=False)

import logging

_logger = logging.getLogger(__name__)


ODOO_VERSION = os.environ.get("ODOO_VERSION")
TARGET_FILE = os.environ.get("ODOO_RC")
CONFIG_DIR = os.path.join(os.environ.get("RESOURCES", ""), "conf")
CONFIG_FILES = []

# Read all configuraiton files found in those folders
_logger.info("Merging found configuration files in %s", TARGET_FILE)
for file in sorted(os.listdir(CONFIG_DIR)):
    parser.read(os.path.join(CONFIG_DIR, file))

# Write it to a memory string object
with closing(StringIO()) as resultfp:
    parser.write(resultfp)
    resultfp.seek(0)
    # Process line by line
    # We'll skip lines with errores
    result = []
    for line in resultfp:
        try:
            # Try to expand variables
            key = line.split("=")[0].strip()
            value = Template(line.split("=")[1].strip()).substitute(os.environ)
            if value == '':
                raise KeyError("Empty value")
            line = "%s=%s" % (key, value)
        except KeyError as e:
            # If error, simply ignore this line
            _logger.warning("Missing env %s. Skipping config line: %s" % (str(e), line))
            continue
        except IndexError as e:
            # If error, simply ignore this line
            _logger.warning("no option")
        result.append(line)
    # Merge config file
    result = "\n".join(result)
    _logger.debug("Resulting configuration:\n%s", result)
    print(TARGET_FILE)
    # Write it to destination
    with open(TARGET_FILE, "w") as targetfp:
        _logger.warning(result)
        targetfp.write(result)
